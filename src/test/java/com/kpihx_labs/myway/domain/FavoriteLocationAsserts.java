package com.kpihx_labs.myway.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FavoriteLocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteLocationAllPropertiesEquals(FavoriteLocation expected, FavoriteLocation actual) {
        assertFavoriteLocationAutoGeneratedPropertiesEquals(expected, actual);
        assertFavoriteLocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteLocationAllUpdatablePropertiesEquals(FavoriteLocation expected, FavoriteLocation actual) {
        assertFavoriteLocationUpdatableFieldsEquals(expected, actual);
        assertFavoriteLocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteLocationAutoGeneratedPropertiesEquals(FavoriteLocation expected, FavoriteLocation actual) {
        assertThat(expected)
            .as("Verify FavoriteLocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteLocationUpdatableFieldsEquals(FavoriteLocation expected, FavoriteLocation actual) {
        assertThat(expected)
            .as("Verify FavoriteLocation relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteLocationUpdatableRelationshipsEquals(FavoriteLocation expected, FavoriteLocation actual) {}
}
